{"version":3,"sources":["lib/MtgCard.jsx","lib/MtgDeck.jsx","components/CardLink.jsx","components/DeckCard.jsx","components/DeckList.jsx","deck.jsx"],"names":["MtgCard","input","raw","quantity","name","set","setNumber","lookup","parseImport","matches","match","groups","MtgDeck","Deck","Sideboard","Array","isArray","split","type","forEach","line","push","allCards","concat","Commander","Companion","lookupData","map","card","Set","sort","substring","indexOf","collector_number","fetch","method","headers","body","JSON","stringify","identifiers","rawResponse","json","scryfallData","console","log","foundCards","data","cardData","find","toUpperCase","deckExport","arena","length","CardLink","DeckCard","Fragment","wp","element","__","i18n","DeckList","deck","registerBlockType","blocks","InspectorControls","blockEditor","components","Button","PanelBody","TextareaControl","title","icon","category","supports","html","attributes","default","source","selector","edit","props","parseRaw","event","setAttributes","clearDeck","getScryfallData","e","save"],"mappings":"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","file":"deck.js","sourceRoot":"","sourcesContent":["class MtgCard {\n/*\traw;\n\tquantity;\n\tname = '';\n\tset = '';\n\tsetNumber = 0;\n\tlookup = {};\n*/\n\tconstructor( input = '' ) {\n\t\tthis.raw = '';\n\n\t\tthis.quantity = 0;\n\t\tthis.name = '';\n\t\tthis.set = '';\n\t\tthis.setNumber = '';\n\n\t\tthis.lookup = {};\n\n\t\tthis.parseImport( input );\n\t}\n\n\tparseImport( input ) {\n\t\tif ( ! input ) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.raw = input;\n\n\t\tconst matches = input.match( /^(?<quantity>\\d+) (?<name>.+) \\((?<set>[\\da-zA-Z]{3})\\) (?<setNumber>\\d+)$/ );\n\n\t\tif ( matches ) {\n\t\t\tthis.quantity  = matches.groups.quantity;\n\t\t\tthis.name      = matches.groups.name;\n\t\t\tthis.set       = matches.groups.set;\n\t\t\tthis.setNumber = matches.groups.setNumber;\n\t\t}\n\t}\n\n\tget arena() {\n\t\treturn this.quantity + ' ' + this.name + ' (' + this.set + ') ' + this.setNumber;\n\t}\n}\n\nexport default MtgCard;\n","\nimport MtgCard from './MtgCard';\n\nclass MtgDeck {\n/*\tCompanion;\n\tCommander;\n\tDeck = [];\n\tSideboard = [];\n*/\n\tconstructor( input = false ) {\n\t\tthis.Deck = [];\n\t\tthis.Sideboard = [];\n\n\t\tif ( input ) {\n\t\t\tthis.parseImport( input );\n\t\t}\n\t}\n\n\tparseImport( input ) {\n\t\tif ( ! Array.isArray( input ) ) {\n\t\t\tinput = input.split('\\n');\n\t\t}\n\n\t\tlet type = 'Deck';\n\n\t\tinput.forEach( function( line ) {\n\t\t\tif ( line ) {\n\t\t\t\t// If it starts with a digit, it's a card.  Else, it's a type.\n\t\t\t\tif ( line.match( /^\\d/ ) ) {\n\t\t\t\t\t// Decks and Sideboards can be multiple cards, so add it to the array.\n\t\t\t\t\tif ( 'Deck' === type || 'Sideboard' === type ) {\n\t\t\t\t\t\tthis[ type ].push( new MtgCard( line ) );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis[ type ] = new MtgCard( line );\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttype = line;\n\t\t\t\t}\n\t\t\t}\n\t\t}, this );\n\t}\n\n\tasync getScryfallData() {\n\t\t// Make one big array of all involved cards.\n\t\tconst allCards = this.Deck.concat( this.Sideboard, this.Commander, this.Companion );\n\n\t\t// Map the data into strings so we can properly sort out unique lookups.\n\t\tlet lookupData = allCards.map( card => card.set + '|' + card.setNumber );\n\n\t\t// Filter out duplicates and sort!\n\t\tlookupData = [ ...new Set( lookupData ) ].sort();\n\n\t\tlookupData = lookupData.map( card => ({\n\t\t\tset: card.substring( 0, card.indexOf( '|' ) ),\n\t\t\tcollector_number: card.substring( 1 + card.indexOf( '|' ) ),\n\t\t}))\n\n\t\t// console.log( lookupData );\n\n\t\t// Remember, Scryfall maxes out at 75 cards searched for!\n\t\tconst rawResponse = await fetch('https://api.scryfall.com/cards/collection', {\n\t\t\tmethod: 'POST',\n\t\t\theaders: {\n\t\t\t\t'Accept': 'application/json',\n\t\t\t\t'Content-Type': 'application/json'\n\t\t\t},\n\t\t\tbody: JSON.stringify( { identifiers: lookupData } ),\n\t\t});\n\t\tconst scryfallData = await rawResponse.json();\n\n\t\tconsole.log( scryfallData );\n\n\t\tconst foundCards = scryfallData.data;\n\n\t\tconsole.log( foundCards );\n\n\t\t// Reuse a var as we fly through?\n\t\tlet cardData;\n\n\t\t// Loop through\n\t\tif ( this.Companion ) {\n\t\t\tcardData = foundCards.find( card => { card.collector_number === this.Companion.setNumber && card.set.toUpperCase() === this.Companion.set.toUpperCase() } );\n\t\t\tif ( cardData ) {\n\t\t\t\tthis.Companion.lookup = cardData;\n\t\t\t}\n\t\t}\n\n\t\tif ( this.Commander ) {\n\t\t\tcardData = foundCards.find( card => { card.collector_number === this.Commander.setNumber && card.set.toUpperCase() === this.Commander.set.toUpperCase() } );\n\t\t\tif ( cardData ) {\n\t\t\t\tthis.Commander.lookup = cardData;\n\t\t\t}\n\t\t}\n\n\t\t// Show something to verify.\n\t\tconsole.log( this );\n\t}\n\n\tget arena() {\n\t\tlet deckExport = '';\n\n\t\tif ( this.Commander ) {\n\t\t\tdeckExport += 'Commander\\n' + this.Commander.arena + '\\n\\n';\n\t\t}\n\n\t\tif ( this.Companion ) {\n\t\t\tdeckExport += 'Companion\\n' + this.Companion.arena + '\\n\\n';\n\t\t}\n\n\t\tif ( this.Sideboard.length ) {\n\t\t\tdeckExport += 'Deck\\n';\n\t\t\tthis.Deck.forEach( function( card ) {\n\t\t\t\tdeckExport += card.arena + '\\n';\n\t\t\t} )\n\t\t\tdeckExport += '\\n';\n\t\t}\n\n\t\tif ( this.Sideboard.length ) {\n\t\t\tdeckExport += 'Sideboard\\n';\n\t\t\tthis.Sideboard.forEach( function( card ) {\n\t\t\t\tdeckExport += card.arena + '\\n';\n\t\t\t} )\n\t\t\tdeckExport += '\\n';\n\t\t}\n\n\t\treturn deckExport;\n\t}\n}\n\nexport default MtgDeck;\n","\nfunction CardLink( { card } ) {\n\treturn ( <a href=\"#\">{ card.name }</a> );\n}\n\nexport default CardLink;\n","\nimport CardLink from './CardLink';\n\nfunction DeckCard( { card } ) {\n\treturn (\n\t\t<li>\n\t\t\t{ card.quantity }x <CardLink card={ card } />\n\t\t</li>\n\t);\n}\n\nexport default DeckCard;\n","\nconst {\n\tFragment\n} = wp.element;\n\nconst {\n\t__\n} = wp.i18n;\n\nimport CardLink from './CardLink';\nimport DeckCard from './DeckCard';\n\nfunction DeckList( { deck } ) {\n\treturn (\n\t\t<div className=\"mtg-deck-list\">\n\n\t\t\t{ deck.Commander && (\n\t\t\t\t<Fragment>\n\t\t\t\t\t<h3>{ __( 'Commander:', 'mtg-blocks' ) }</h3>\n\t\t\t\t\t<CardLink card={ deck.Commander } />\n\t\t\t\t</Fragment>\n\t\t\t) }\n\n\t\t\t{ deck.Companion && (\n\t\t\t\t<Fragment>\n\t\t\t\t\t<h3>{ __( 'Companion:', 'mtg-blocks' ) }</h3>\n\t\t\t\t\t<CardLink card={ deck.Companion } />\n\t\t\t\t</Fragment>\n\t\t\t) }\n\n\t\t\t{ deck.Deck.length && (\n\t\t\t\t<Fragment>\n\t\t\t\t\t<h3>{ __( 'Deck:', 'mtg-blocks' ) }</h3>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t{ deck.Deck.map( card => ( <DeckCard key={ card.raw } card={ card } /> ) ) }\n\t\t\t\t\t</ul>\n\t\t\t\t</Fragment>\n\t\t\t) }\n\n\t\t\t{ deck.Sideboard.length && (\n\t\t\t\t<Fragment>\n\t\t\t\t\t<h3>{ __( 'Sideboard:', 'mtg-blocks' ) }</h3>\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t{ deck.Sideboard.map( card => ( <DeckCard key={ card.raw } card={ card } /> ) ) }\n\t\t\t\t\t</ul>\n\t\t\t\t</Fragment>\n\t\t\t) }\n\n\t\t</div>\n\t)\n}\n\n\nexport default DeckList;\n","const {\n\tregisterBlockType\n} = wp.blocks;\n\nconst {\n\tInspectorControls\n} = wp.blockEditor;\n\nconst {\n\tButton,\n\tPanelBody,\n\tTextareaControl\n} = wp.components;\n\nconst {\n\tFragment\n} = wp.element;\n\nconst {\n\t__\n} = wp.i18n;\n\nimport MtgDeck from './lib/MtgDeck';\nimport DeckList from './components/DeckList';\n\nimport './deck.scss'\n\nregisterBlockType( 'magic-blocks/deck', {\n\ttitle: __( 'MTG Deck', 'mtg-blocks' ),\n\ticon: 'admin-page',\n\tcategory: 'common',\n\tsupports    : {\n\t\thtml    : false,\n\t},\n\n\tattributes: {\n\t\traw: {\n\t\t\ttype: 'string',\n\t\t\tdefault: '',\n\t\t\tsource: 'text',\n\t\t\tselector: 'pre',\n\t\t},\n\t\tdeck: {\n\t\t\ttype: 'object',\n\t\t\tdefault: null,\n\t\t}\n\t},\n\n\tedit: function( props ) {\n\t\tconst parseRaw = function( event ) {\n\t\t\tprops.setAttributes( { deck: new MtgDeck( props.attributes.raw ) } );\n\t\t},\n\t\tclearDeck = function() {\n\t\t\tprops.setAttributes({\n\t\t\t\traw : '',\n\t\t\t\tdeck : null,\n\t\t\t});\n\t\t};\n\n\t\tif ( props.attributes.deck && props.attributes.deck.getScryfallData ) {\n\t\t\tconsole.log( JSON.stringify( props.attributes.deck.getScryfallData() ) );\n\t\t} else {\n\t\t\tconsole.log( 'props.attributes.deck.getScryfallData not found!' );\n\t\t}\n\n\t\treturn (\n\t\t\t<Fragment>\n\t\t\t\t{ props.attributes.deck ? (\n\t\t\t\t\t<DeckList deck={ props.attributes.deck } />\n\t\t\t\t) : (\n\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t<TextareaControl\n\t\t\t\t\t\t\tlabel={ __( 'Arena Format Deck Import', 'mtg-blocks' ) }\n\t\t\t\t\t\t\tvalue={ props.attributes.raw }\n\t\t\t\t\t\t\tonChange={ raw => props.setAttributes( { raw } ) }\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Button isSecondary onClick={ e => parseRaw( e ) }>\n\t\t\t\t\t\t\t{ __( 'Process Import →', 'mtg-blocks' ) }\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</Fragment>\n\t\t\t\t) }\n\t\t\t\t<InspectorControls>\n\t\t\t\t\t<PanelBody title={ __( 'Deck Settings', 'mtg-blocks' ) }>\n\t\t\t\t\t\t<Button isPrimary={ !! props.attributes.deck } disabled={ ! props.attributes.deck } isLarge={true} onClick={ clearDeck }>\n\t\t\t\t\t\t\t{ __( 'Reset Deck', 'mtg-blocks' ) }\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</PanelBody>\n\t\t\t\t</InspectorControls>\n\t\t\t</Fragment>\n\t\t);\n\t},\n\n\tsave: function( props ) {\n\t\treturn (\n\t\t\t<div className=\"mtg-blocks_deck\">\n\t\t\t\t<pre>{ props.attributes.raw }</pre>\n\t\t\t\t{ props.attributes.deck ? ( <DeckList deck={ props.attributes.deck } /> ) : null }\n\t\t\t</div>\n\t\t);\n\t}\n} );\n"]}